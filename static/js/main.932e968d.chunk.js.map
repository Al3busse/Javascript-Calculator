{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["numbersTest","zeroTest","operatorTest","App","props","state","value","prevValue","formulaScreen","currentValue","prevCalc","lastValue","decimalAllow","lastOperator","resolve","bind","calculate","clearDisplay","handlePrevResult","handleCurrentValue","valueN","test","this","setState","cValue","join","replace","e","target","push","length","splice","result","toString","answer","evaluate","id","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.932e968d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { evaluate } from \"mathjs\";\n\nconst numbersTest = /\\d|\\./;\nconst zeroTest = /^0+/;\nconst operatorTest = /\\W/;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: null,\n      prevValue: [],\n      formulaScreen: [],\n      currentValue: [0],\n      prevCalc: 0,\n      lastValue: [],\n      decimalAllow: true,\n      lastOperator: \"\",\n    };\n    this.resolve = this.resolve.bind(this);\n    this.calculate = this.calculate.bind(this);\n    this.clearDisplay = this.clearDisplay.bind(this);\n    this.handlePrevResult = this.handlePrevResult.bind(this);\n    this.handleCurrentValue = this.handleCurrentValue.bind(this);\n  }\n\n  handlePrevResult(valueN) {\n    if (numbersTest.test(valueN)) {\n      this.setState({\n        currentValue: valueN,\n        formulaScreen: [valueN],\n        prevCalc: 0,\n        lastValue: [valueN],\n      });\n    } else {\n      this.setState({\n        currentValue: valueN,\n        formulaScreen: [this.state.prevCalc, valueN],\n        prevCalc: 0,\n        lastValue: [],\n      });\n    }\n  }\n\n  handleCurrentValue() {\n    let cValue = this.state.lastValue.join(\"\").replace(/^0+(?!\\.|$)/, \"\");\n    this.setState({\n      currentValue: cValue,\n    });\n  }\n\n  calculate(e) {\n    let valueN = e.target.value;\n    if (this.state.prevCalc !== 0) {\n      this.handlePrevResult(valueN);\n    } else {\n      if (numbersTest.test(valueN)) {\n        if (valueN === \".\") {\n          if (this.state.decimalAllow === true) {\n            this.setState({ decimalAllow: false, lastOperator: \"\" });\n            this.state.lastValue.push(valueN);\n            this.state.formulaScreen.push(valueN);\n            this.handleCurrentValue();\n          }\n        } else {\n          this.state.lastValue.push(valueN);\n          this.handleCurrentValue();\n          this.setState({ lastOperator: \"\" });\n\n          if (!zeroTest.test(this.state.lastValue)) {\n            this.state.formulaScreen.push(valueN);\n          } else {\n            this.setState({ lastValue: [], lastOperator: \"\" });\n          }\n        }\n      } else if (!operatorTest.test(valueN)) {\n        this.setState({\n          currentValue: valueN,\n          lastValue: [],\n          decimalAllow: true,\n          lastOperator: \"\",\n        });\n        this.state.formulaScreen.push(valueN);\n      } else {\n        this.setState({\n          currentValue: valueN,\n          lastValue: [],\n          decimalAllow: true,\n        });\n        if (!operatorTest.test(this.state.lastOperator)) {\n          this.setState({ lastOperator: valueN });\n          this.state.formulaScreen.push(valueN);\n        } else if (valueN === \"-\") {\n          if (\n            this.state.formulaScreen[this.state.formulaScreen.length - 1] ===\n            \"-\"\n          ) {\n            this.setState({ lastOperator: valueN });\n            this.state.formulaScreen.splice(-1, 1, valueN);\n          } else {\n            this.setState({ lastOperator: valueN });\n            this.state.formulaScreen.push(valueN);\n          }\n        } else if (\n          this.state.formulaScreen[this.state.formulaScreen.length - 1] ===\n            \"-\" &&\n          operatorTest.test(\n            this.state.formulaScreen[this.state.formulaScreen.length - 2]\n          )\n        ) {\n          this.setState({ lastOperator: valueN });\n          this.state.formulaScreen.splice(-2, 2, valueN);\n        } else {\n          this.setState({ lastOperator: valueN });\n          this.state.formulaScreen.splice(-1, 1, valueN);\n        }\n      }\n    }\n  }\n\n  resolve() {\n    let result = this.state.formulaScreen.toString().replace(/,/g, \"\");\n    let answer = evaluate(result);\n    this.setState({\n      formulaScreen: result + \"=\" + answer,\n      currentValue: answer,\n      prevCalc: answer,\n      lastValue: [],\n      decimalAllow: true,\n    });\n  }\n\n  clearDisplay() {\n    this.setState({\n      value: \"\",\n      prevValue: [],\n      formulaScreen: [],\n      currentValue: [0],\n      prevCalc: 0,\n      lastValue: [],\n      decimalAllow: true,\n      lastOperator: \"\",\n    });\n  }\n\n  render() {\n    return (\n      <div id='calculator'>\n        <div>\n          <div>{this.state.formulaScreen}</div>\n          <div id='display'>{this.state.currentValue}</div>\n        </div>\n        <div>\n          <button id='clear' onClick={this.clearDisplay} value='AC'>\n            AC\n          </button>\n          <button id='one' onClick={this.calculate} value='1'>\n            1\n          </button>\n          <button id='two' onClick={this.calculate} value='2'>\n            2\n          </button>\n          <button id='three' onClick={this.calculate} value='3'>\n            3\n          </button>\n          <button id='four' onClick={this.calculate} value='4'>\n            4\n          </button>\n          <button id='five' onClick={this.calculate} value='5'>\n            5\n          </button>\n          <button id='six' onClick={this.calculate} value='6'>\n            6\n          </button>\n          <button id='seven' onClick={this.calculate} value='7'>\n            7\n          </button>\n          <button id='eight' onClick={this.calculate} value='8'>\n            8\n          </button>\n          <button id='nine' onClick={this.calculate} value='9'>\n            9\n          </button>\n          <button id='zero' onClick={this.calculate} value='0'>\n            0\n          </button>\n          <button id='decimal' onClick={this.calculate} value='.'>\n            .\n          </button>\n          <button id='add' onClick={this.calculate} value='+'>\n            +\n          </button>\n          <button id='subtract' onClick={this.calculate} value='-'>\n            -\n          </button>\n          <button id='divide' onClick={this.calculate} value='/'>\n            /\n          </button>\n          <button id='multiply' onClick={this.calculate} value='*'>\n            x\n          </button>\n          <button id='equals' onClick={this.resolve} value='='>\n            =\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}